{"version":3,"sources":["components/Search/SearchInput.js","components/User/Id.js","components/User/Name.js","components/User/Items.js","components/User/Address.js","components/User/User.js","components/Search/List.js","components/EmptyResult.js","data.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","props","react_default","a","createElement","className","type","value","currentInput","onChange","changeHandler","onKeyDown","keyPressHandler","placeholder","autofocus","defaultProps","Id","id","Name","name","Items","items","Address","address","User","React","forwardRef","ref","_props$data","data","pincode","classes","focused","tabIndex","divId","handleKeyPress","onMouseMove","handleMouseEvent","User_Id","User_Name","User_Items","User_Address","List","state","focusedUser","scrollIntoView","userRef","createRef","e","_this","setState","keyCode","currentFocus","users","length","current","focus","parseInt","prevProps","prevState","this","ensureFocusedItemVisible","behaviour","block","_this2","listElements","map","user","index","components_User_User","Component","emptyStyle","marginTop","EmptyResult","style","message","Search","listRef","matchItems","regexp","match","forEach","item","search","filterUsers","filter","filterByKeyword","keyword","target","RegExp","concat","searchResults","Search_List","components_EmptyResult","Search_SearchInput","App","components_Search_Search","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ec92e21.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchInput = props => {\n  return (\n    <input\n      className=\"search-input\"\n      type=\"search\"\n      value={props.currentInput}\n      onChange={props.changeHandler}\n      onKeyDown={props.keyPressHandler}\n      placeholder={props.placeholder}\n      autofocus\n    />\n  );\n};\n\nSearchInput.propTypes = {\n  currentInput: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string\n};\n\nSearchInput.defaultProps = {\n  placeholder: 'Search'\n};\n\nexport default SearchInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Id = props => {\n  return <div>{props.id}</div>;\n};\n\nId.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport default Id;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Name = props => {\n  return <div>{props.name}</div>;\n};\n\nName.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default Name;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Items = props => {\n  return <div>{props.items}</div>;\n};\n\nItems.propTypes = {\n  items: PropTypes.array.isRequired\n};\n\nexport default Items;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Address = props => {\n  return <div>{props.address}</div>;\n};\n\nAddress.propTypes = {\n  address: PropTypes.string.isRequired\n};\n\nexport default Address;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Id from './Id';\nimport Name from './Name';\nimport Items from './Items';\nimport Address from './Address';\nimport './User.scss';\n\nconst User = React.forwardRef((props, ref) => {\n  const { id, name, items, address, pincode } = props.data;\n  let classes = 'user';\n  if (props.focused) {\n    classes += ' focused';\n  }\n  const handleMouseEvent = () => {\n    props.handleMouseEvent(props.divId);\n  };\n  return (\n    <div\n      tabIndex=\"0\"\n      id={props.divId}\n      ref={ref}\n      className={classes}\n      onKeyDown={props.handleKeyPress}\n      onMouseMove={handleMouseEvent}\n    >\n      <Id id={id} />\n      <Name name={name} />\n      <Items items={items} />\n      <Address address={address} pincode={pincode} />\n    </div>\n  );\n});\n\nUser.propTypes = {\n  data: PropTypes.object.isRequired,\n  divId: PropTypes.number.isRequired,\n  focused: PropTypes.bool.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  handleMouseEvent: PropTypes.func.isRequired\n};\n\nexport default User;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport User from \"../User/User\";\n\nclass List extends Component {\n  state = {\n    focusedUser: -1,\n    scrollIntoView: false,\n  };\n  userRef = React.createRef();\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.focusedUser !== prevState.focusedUser &&\n      this.state.scrollIntoView\n    ) {\n      this.ensureFocusedItemVisible();\n    }\n  }\n\n  ensureFocusedItemVisible() {\n    this.userRef.current &&\n      this.userRef.current.scrollIntoView({\n        behaviour: \"smooth\",\n        block: \"center\",\n      });\n  }\n\n  handleKeyPress = (e) => {\n    // scroll into view only on keyboard navigation\n    this.setState({ scrollIntoView: true });\n    // up arrow\n    if (e.keyCode === 38) {\n      this.setState((state) => {\n        const currentFocus = state.focusedUser;\n        // if up key is pressed multiple times on first list item, keep first item highlighted\n        const focusedUser = currentFocus <= 0 ? 0 : currentFocus - 1;\n        return {\n          focusedUser,\n        };\n      });\n    }\n    // down arrow\n    if (e.keyCode === 40) {\n      this.setState((state) => {\n        const currentFocus = state.focusedUser;\n        // if down key is pressed multiple times on last list item, keep last item highlighted\n        const focusedUser =\n          currentFocus >= this.props.users.length - 1\n            ? this.props.users.length - 1\n            : currentFocus + 1;\n        return {\n          focusedUser,\n        };\n      });\n    }\n  };\n\n  handleMouseEvent = (id) => {\n    this.userRef.current && this.userRef.current.focus();\n    this.setState({ focusedUser: parseInt(id), scrollIntoView: false });\n  };\n\n  render() {\n    const listElements = this.props.users.map((user, index) => {\n      const focused = index === this.state.focusedUser;\n\n      return (\n        <User\n          divId={index}\n          data={user}\n          focused={focused}\n          ref={focused && this.userRef}\n          handleKeyPress={this.handleKeyPress}\n          handleMouseEvent={this.handleMouseEvent}\n        />\n      );\n    });\n    return <div className=\"result-list\">{listElements}</div>;\n  }\n}\n\nList.propTypes = {\n  users: PropTypes.array.isRequired,\n};\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst emptyStyle = { marginTop: '30px' };\n\nconst EmptyResult = props => {\n  return <div style={emptyStyle}>{props.message}</div>;\n};\n\nEmptyResult.propTypes = {\n  message: PropTypes.string\n};\n\nEmptyResult.defaultProps = {\n  message: 'No results found'\n};\n\nexport default EmptyResult;\n","const users = [\n  {\n    id: '123-s2-546',\n    name: 'John Jacobs',\n    items: ['bucket', 'bottle'],\n    address: '1st Cross, 9th Main, abc Apartment',\n    pincode: '5xx012'\n  },\n  {\n    id: '123-s3-146',\n    name: 'David Mire',\n    items: ['Bedroom Set'],\n    address: '2nd Cross, BTI Apartment',\n    pincode: '4xx012'\n  },\n  {\n    id: '223-a1-234',\n    name: 'Soloman Marshall',\n    items: ['bottle'],\n    address: 'Riverbed Apartment',\n    pincode: '4xx032'\n  },\n  {\n    id: '121-s2-111',\n    name: 'Ricky Beno',\n    items: ['Mobile Set'],\n    address: 'Sunshine City',\n    pincode: '5xx072'\n  },\n  {\n    id: '123-p2-246',\n    name: 'Sikander Singh',\n    items: ['Air Conditioner'],\n    address: 'Riverbed Apartment',\n    pincode: '4xx032'\n  },\n  {\n    id: 'b23-s2-321',\n    name: 'Ross Wheeler',\n    items: ['Mobile'],\n    address: '1st Cross, 9th Main, abc Apartement',\n    pincode: '5xx012'\n  },\n  {\n    id: '113-n2-563',\n    name: 'Ben Bish',\n    items: ['Kitchen Set', 'Chair'],\n    address: 'Sunshine City',\n    pincode: '5xx072'\n  },\n  {\n    id: '323-s2-112',\n    name: 'John Michael',\n    items: ['Refrigerator'],\n    address: '1st Cross, 9th Main, abc Apartement',\n    pincode: '5xx012'\n  },\n  {\n    id: 'abc-34-122',\n    name: 'Jason Jordan',\n    items: ['Mobile'],\n    address: 'Riverbed Apartment',\n    pincode: '4xx032'\n  }\n];\n\nexport default users;\n","import React, { Component } from \"react\";\nimport SearchInput from \"./SearchInput\";\nimport List from \"./List\";\nimport EmptyResult from \"../EmptyResult\";\nimport users from \"../../data\";\nimport \"./Search.scss\";\n\nclass Search extends Component {\n  state = {\n    currentInput: \"\",\n    users: [],\n  };\n  listRef = React.createRef();\n\n  componentDidMount() {\n    this.setState({\n      users,\n    });\n  }\n\n  matchItems = (items, regexp) => {\n    let match = false;\n    items.forEach((item) => {\n      if (item.search(regexp) > -1) {\n        match = true;\n      }\n    });\n    return match;\n  };\n\n  filterUsers = (users, regexp) => {\n    const filteredUsers = users.filter(\n      (user) =>\n        user.name.search(regexp) > -1 ||\n        user.id.search(regexp) > -1 ||\n        this.matchItems(user.items, regexp) ||\n        user.address.search(regexp) > -1 ||\n        user.pincode.search(regexp) > -1\n    );\n    return filteredUsers;\n  };\n\n  filterByKeyword = (e) => {\n    const keyword = e.target.value;\n    this.setState({ currentInput: keyword });\n    if (keyword) {\n      const regexp = new RegExp(`${keyword}`, \"i\");\n      this.setState({ users: this.filterUsers(users, regexp) });\n    } else {\n      this.setState({ users });\n    }\n  };\n\n  handleKeyPress = (e) => {\n    // to enable keyboard navigation when key is pressed while input is focused\n    this.listRef.current && this.listRef.current.handleKeyPress(e);\n  };\n\n  render() {\n    const searchResults = this.state.users.length ? (\n      <List users={this.state.users} ref={this.listRef} />\n    ) : (\n      <EmptyResult message=\"No users found\" />\n    );\n    return (\n      <div className=\"search-container\">\n        <SearchInput\n          currentInput={this.state.currentInput}\n          keyPressHandler={this.handleKeyPress}\n          changeHandler={this.filterByKeyword}\n          placeholder=\"Search...\"\n        />\n        {searchResults}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport Search from './components/Search/Search';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}